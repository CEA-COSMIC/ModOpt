[project]
name="modopt"
description = 'Modular Optimisation tools for soliving inverse problems.'
version = "1.7.1"
requires-python= ">=3.8"

authors = [{name="Samuel Farrens", email="samuel.farrens@cea.fr"},
{name="Chaithya GR", email="chaithyagr@gmail.com"},
{name="Pierre-Antoine Comby", email="pierre-antoine.comby@cea.fr"}
]
readme="README.md"
license={file="LICENCE.txt"}

dependencies = ["numpy", "scipy", "tqdm", "importlib_metadata"]

[project.optional-dependencies]
gpu=["torch", "ptwt"]
doc=["myst-parser==0.16.1",
"nbsphinx==0.8.7",
"nbsphinx-link==1.3.0",
"sphinx-gallery==0.11.1",
"sphinxawesome-theme==3.2.1",
"sphinxcontrib-bibtex"]
dev=["black", "ruff"]
test=["pytest<8.0.0", "pytest-cases", "pytest-cov", "pytest-xdist", "pytest-sugar"]

[build-system]
requires=["setuptools", "setuptools-scm[toml]", "wheel"]

[tool.coverage.run]
omit = ["*tests*", "*__init__*", "*setup.py*", "*_version.py*", "*example*"]

[tool.coverage.report]
precision = 2
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.black]


[tool.ruff]
exclude = ["examples", "docs"]
[tool.ruff.lint]
select = ["E", "F", "B", "Q", "UP", "D", "NPY", "RUF"]

ignore = ["F401"] # we like the try: import ... expect: ...

[tool.ruff.lint.pydocstyle]
convention="numpy"

[tool.isort]
profile="black"

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = ["tests/test_helpers"]
addopts = ["--cov=modopt", "--cov-report=term-missing", "--cov-report=xml"]
