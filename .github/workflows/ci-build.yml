name: CI

on:
  pull_request:
    branches:
     - develop
     - master
     - main

jobs:
  test-full:
    name: Full Test Suite
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Report WPS Errors
        uses: wemake-services/wemake-python-styleguide@0.14.1
        continue-on-error: true
        with:
          reporter: 'github-pr-review'
          path: './modopt'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Conda with Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false

      - name: Check Conda
        shell: bash -l {0}
        run: |
          conda info
          conda list
          python --version

      - name: Install Dependencies
        shell: bash -l {0}
        run: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install -r develop.txt
          python -m pip install -r docs/requirements.txt
          python -m pip install astropy scikit-image scikit-learn
          python -m pip install twine
          python -m pip install .

      - name: Run Tests
        shell: bash -l {0}
        run: |
          export PATH=/usr/share/miniconda/bin:$PATH
          python setup.py test

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: pytest.xml

      - name: Check Distribution
        shell: bash -l {0}
        run: |
          python setup.py sdist
          twine check dist/*

      - name: Check API Documentation build
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pandoc
          sphinx-apidoc -t docs/_templates -feTMo docs/source modopt
          sphinx-build -b doctest -E docs/source docs/_build

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: unittests

  test-basic:
    name: Basic Test Suite
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.9]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Conda with Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false

      - name: Install Dependencies
        shell: bash -l {0}
        run: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install -r develop.txt
          python -m pip install -r docs/requirements.txt
          python -m pip install astropy scikit-image scikit-learn
          python -m pip install .

      - name: Run Tests
        shell: bash -l {0}
        run: |
          export PATH=/usr/share/miniconda/bin:$PATH
          python setup.py test

  test-results:
    name: Deploy Test Results
    needs: test-full
    runs-on: ubuntu-latest
    if: >
       github.event.workflow_run.conclusion != 'skipped' && (
         startsWith(github.event.workflow_run.head_branch, 'dependabot/') ||
         github.event.workflow_run.head_repository.full_name != github.repository
       )

    steps:
       - name: Download Artifacts
         uses: actions/github-script@v3.1.0
         with:
            script: |
               var fs = require('fs');
               var path = require('path');
               var artifacts_path = path.join('${{github.workspace}}', 'artifacts')
               fs.mkdirSync(artifacts_path, { recursive: true })

               var artifacts = await github.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: ${{ github.event.workflow_run.id }},
               });

               for (const artifact of artifacts.data.artifacts) {
                  var download = await github.actions.downloadArtifact({
                     owner: context.repo.owner,
                     repo: context.repo.repo,
                     artifact_id: artifact.id,
                     archive_format: 'zip',
                  });
                  var artifact_path = path.join(artifacts_path, `${artifact.name}.zip`)
                  fs.writeFileSync(artifact_path, Buffer.from(download.data));
                  console.log(`Downloaded ${artifact_path}`);
               }
       - name: Extract Artifacts
         run: |
            for file in artifacts/*.zip
            do
              if [ -f "$file" ]
              then
                dir="${file/%.zip/}"
                mkdir -p "$dir"
                unzip -d "$dir" "$file"
              fi
            done

       - name: Publish Unit Test Results
         uses: EnricoMi/publish-unit-test-result-action@v1
         with:
            commit: ${{ github.event.workflow_run.head_sha }}
            files: "artifacts/*/**/pytest.xml"
